swagger: '2.0'
info:
  title: Sunglasses API
  description: An API to support Kate's sunglasses platform
  version: 1.0.0
host: localhost:3001
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /brands:
    get:
      tags: 
        - Brands
      summary: Brands of Sunglasses
      description: >
        Brands define groupings of sunglasses for browsing. 
      responses:
        '200':
          description: An array of brands of sunglasses
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      
  /brands/{id}/products:
    get:
      tags:
        - Brands
      summary: Products in a Brand
      description: >
        This endpoint returns all of the products by the specified brand, which is identified by the brand id. 
      parameters:
        - name: id
          in: path
          description: The id of the brand by which to search for products. 
          required: true
          type: string
      responses:
        '200':
          description: An array of products by the specified brand. 
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '404':
          description: Brand not found. 
  /products:
    get:
      tags:
        - Products
      summary: Products
      description: >
        This endpoint returns allows you to search product names based upon a required search string.  
      parameters:
        - name: query
          in: query
          description: Search query string
          required: true
          type: string
      responses:
        '200':
          description: An array of products with the query string appearing in the name of the product. 
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '400':
          description: Invalid request format
        '404':
          description: No matching results found.  
  /login:
    post:
      tags: 
        - Log In
      summary: Log in user
      description: >
        This endpoint allows you to submit the user's log in credentials.
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Object with username/email and password
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: >-
                  User's email address as requested at log in. 
              password:
                type: string
                description: >-
                  User's password as requested at log in.  
      responses:
        '200':
          description: Access Token
          schema: 
            type: object
            properties:
              token:
               type: string
               description: >-
                Unique token to be used in header for other api requests. 
        '400':
          description: Invalid request. 
        '401':
          description: Invalid username or password.
        
  /me/cart:
    get:
      tags: 
        - Me
      summary: View logged-in user's cart
      description: >
        This endpoint can only be accessed by a logged-in user.
      parameters:
        - name: access token
          in: header
          description: Include in authentication bearer heading.  
          required: true
          type: string
      responses:
        '200':
          description: An array of products that have been added to the cart. 
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '400':
          description: Invalid request.
        '401':
          description: Invalid or expired access token. 
    post:
      tags:
        - Me
      summary: Add item to logged-in user's cart
      description: >
        This endpoint adds the product to the logged-in user's cart. You can specify the initial quantity to be added.  Anything less than 1 will throw an error.  Once item has been added to cart, you should use the POST by product ID endpoint for any additional updates to quantity. 
      produces:
        - application/json
      parameters:
        - name: access token
          in: header
          description: Include in authentication bearer heading.
          required: true
          type: string
        - in: body
          name: body
          description: id of product to be added to cart
          required: true
          schema:
            type: object
            properties:
              productId: 
                type: string
                description: >-
                 Product ID
              quantity:
                type: integer
                format: int32
                description: >-
                  Initial quantity of product to be added to cart. 
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/UserProduct'
        '400':
          description: Invalid Request
        '401':
          description: Log in required to access content. 
        '404':
          description: Product not found. 
        '409':
          description: Product already in cart. Use different endpoint to update quantity.
  /me/cart/{productId}:
    delete:
      tags: 
        - Me
      summary: Delete item in cart by ID
      description: >-
        For valid response use integer IDs with positive integer value.  Negative or non-integer values will generate errors.  
      produces:
        - application/json
      parameters:
        - name: access token
          in: header
          description: Include in authentication bearer heading.
          required: true
          type: string
        - name: productId
          in: path
          description: ID of the product to be deleted from cart. 
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '200':
          description: Successful operation. The following items remain in cart
          schema:
            type: array
            items:
              $ref: '#/definitions/UserProduct'
        '400':
          description: Invalid request
        '401': 
          description: Log in required to perform this action. 
        '404':
          description: Invalid product ID
    post:
      tags:
        - Me
      summary: Update quantity of item in cart
      description: >-
        This endpoint will update the quantity of an item in the logged in user's cart if the item is present. 
      produces:
        - application/json
      parameters:
        - name: access token
          in: header
          description: Include in authentication bearer heading.
          required: true
          type: string
        - name: productId
          in: path
          description: ID of the product for which the quantity will be updated. 
          required: true
          type: integer
          minimum: 1
          format: int64
        - in: body
          name: quantity
          description: updated quantity for product in cart
          required: true
          schema:
            type: object
            properties:
              quantity: 
                type: integer
                description: >-
                 New quantity for product in cart. Must be greater than 0. 
      responses:
        '200':
          description: Successful operation.
          schema:
             $ref: '#/definitions/UserProduct'
        '400':
          description: Invalid request
        '401': 
          description: Log in required to perform this action. 
        '404':
          description: Product not found
        
definitions:
  Brand:
    type: object
    properties:
      id:
        type: string
        description: >-
          The unique identifier given to the brand. 
      name:
        type: string
        description: >-
          The name of the brand. 
  Product:
    type: object
    properties:
      id:
        type: string
        description: >-
          The unique identifier given to that specific product. 
      name:
        type: string
        description: >-
          The name of the pair of sunglasses.  
      brand:
        type: string
        description: >-
          The name of the brand which makes this pair of sunglasses.  
      price:
        type: number
        format: double
        description: >-
          The price of the pair of sunglasses.  
      description:
        type: string
        description: >-
          Text description of the sunglasses (i.e. color, style)
      imageUrls:
        type: string
        description: >-
            The url for an image of the sunglasses. 
  UserProduct:
    type: object
    properties:
      id:
        type: string
        description: >-
          The unique identifier given to that specific product. 
      categoryId:
        type: string
        description: >-
          The brand id
      name:
        type: string
        description: >-
          The name of the pair of sunglasses.  
      description:
        type: string
        description: >-
          Text description of the sunglasses.
      price:
        type: number
        format: double
        description: >-
          The price of the pair of sunglasses. 
      imageUrls:
        type: string
        description: >-
            The url for an image of the sunglasses. 
      quantity:
        type: integer
        format: int32
        description: >-
          The quantity of the product in the users cart. 
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string